
plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'com.google.protobuf' version '0.9.4'
}
group = 'com.project.pet'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}
compileJava {
	options.encoding = 'UTF-8'
}

compileTestJava {
	options.encoding = 'UTF-8'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	gradlePluginPortal()
	maven {
		url "https://plugins.gradle.org/m2/"
	}
}

ext {
	grpcVersion = '1.68.0'
	protobufVersion = '4.28.2'
	springGrpcVersion = '2.15.0.RELEASE'
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'javax.annotation:javax.annotation-api:1.3.2'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	//grpc
	implementation "io.grpc:grpc-netty-shaded:${grpcVersion}"
	implementation "io.grpc:grpc-protobuf:${grpcVersion}"
	implementation "io.grpc:grpc-stub:${grpcVersion}"
	implementation "com.google.protobuf:protobuf-java:${protobufVersion}"
	implementation 'net.devh:grpc-spring-boot-starter:2.13.1.RELEASE'
	implementation "net.devh:grpc-server-spring-boot-starter:${springGrpcVersion}"
	//mapstruct
	implementation 'org.mapstruct:mapstruct:1.5.3.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'
}

tasks.withType(Copy).configureEach {
	duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

protobuf {
	protoc {
		artifact = "com.google.protobuf:protoc:4.28.2" // VersiÃ³n del compilador de Protobuf
	}
	plugins {
		grpc {
			artifact = 'io.grpc:protoc-gen-grpc-java:1.68.0'
		}
		doc {
			artifact = 'io.github.pseudomuto:protoc-gen-doc:1.5.1'
		}
	}
	generateProtoTasks {
		all().each { task ->
			task.plugins {
				grpc {}
			}
		}
	}
}

sourceSets {
	main {
		proto {
			srcDir 'src/main/proto'
		}
		java {
			srcDir 'build/generated/source/proto/main/java'
			srcDir 'build/generated/source/proto/main/grpc'
		}
	}
}
tasks.withType(JavaCompile).configureEach {
	it.dependsOn tasks.generateProto
	options.encoding = 'UTF-8'
}
tasks.named('processResources') {
	duplicatesStrategy = DuplicatesStrategy.INCLUDE
}
tasks.named('test') {
	useJUnitPlatform()
}
